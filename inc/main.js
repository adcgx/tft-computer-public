const t = 0; import *as i from "./app_utils.js"; import *as r from "./js_utils.js"; const s = { HTMLBuilt: 1, ParserModuleLoaded: 2, GameConstantsLoaded: 4, UIDataLoaded: 8 }, a = "bin/parser.wasm", l = "bin/worker.wasm", u = "inc/worker.js", c = new Event("before_build_context"); let d, _, m, f, p = 0, g = 1n, h = 0, v = 0n, b = 0n; function E(t) { return _.units[t] } function y(t, e) { e.value < t.min_value || (t.results[t.results_count - 1] = e, t.results.sort(((t, e) => t ? e ? e.value - t.value : -1 : 1)), t.results[t.results_count - 1] && (t.min_value = t.results[t.results_count - 1].value)) } function x(t, e) { let n = [], o = new Map; for (let e = 0n; e < 64n; ++e)if (1n << e & t) { E(e).traits.forEach((t => { o.has(t) ? o.get(t).count++ : o.set(t, { trait: t, count: 1 }) })), n.push(e) } let i = Array.from(o, (([t, e]) => e)); return { units: n, traits: i, value: e } } function L(t) { const e = i.unit_table_util_get_unit(t); e.figure_elm.className = "selectable"; let n = e.options_elm.querySelector("#forced"), o = e.options_elm.querySelector("#banned"); n.className = "ui_unit_option_unselected", n.innerHTML = "> ADD", o.className = "ui_unit_option_unselected", o.innerHTML = "> BAN" } function I(t, e) { i.comp_table_util_get_unit(t, e).classList.toggle("hidden") } function B(t, e) { const n = i.comp_table_util_get_trait(t, e); return n ? parseInt(n.getAttribute("value"), 10) : 0 } function w(t, e, n) { n = Math.min(9, Math.max(0, n)); const o = i.comp_table_util_get_trait(t, e), r = parseInt(o.getAttribute("value"), 10); if (r == n) return; 0 != r && 0 != n || o.classList.toggle("hidden"); o.getElementsByTagName("figcaption")[0].innerText = n + "X", o.setAttribute("value", n) } function M(t) { const e = 1n << BigInt(t); !!(v & e) && (v &= ~e, L(t), U(), I("preview", t)) } function N(t) { const e = 1n << BigInt(t); !!(v & e) || r.popcount(v) + 1 >= h || (v |= e, b &= ~e, function (t) { const e = i.unit_table_util_get_unit(t); e.figure_elm.className = "unit_options_unit_forced", e.figure_elm.classList.add("selectable"); let n = e.options_elm.querySelector("#forced"), o = e.options_elm.querySelector("#banned"); n.className = "ui_unit_option_selected", n.innerHTML = "->ADD", o.className = "ui_unit_option_unselected", o.innerHTML = "> BAN" }(t), z(), I("preview", t)) } function T(t) { const e = 1n << BigInt(t); !!(v & e) ? M(t) : N(t) } function A(t) { const e = 1n << BigInt(t); if (!!(b & e)) return b &= ~e, void L(t); M(t), b |= e, function (t) { const e = i.unit_table_util_get_unit(t); e.figure_elm.className = "unit_options_unit_banned", e.figure_elm.classList.add("selectable"); let n = e.options_elm.querySelector("#forced"), o = e.options_elm.querySelector("#banned"); n.className = "ui_unit_option_unselected", n.innerHTML = "> ADD", o.className = "ui_unit_option_selected", o.innerHTML = "->BAN" }(t) } function C(t) { let e = 0n; for (let n = 0; n < _.units.length; ++n) { if (E(n).cost != t) continue; e |= 1n << BigInt(n) } const n = (e & b) == e; for (let e = 0; e < _.units.length; ++e) { E(e).cost != t || D(e) && !n || A(e) } } function H(t) { D(t) || S(t) ? A(t) : T(t) } function k(t) { w("preview", t, B("preview", t) + 1) } function S(t) { return (1n << BigInt(t) & v) > 0n } function D(t) { return (1n << BigInt(t) & b) > 0n } function q() { m && clearInterval(m), f && clearInterval(f); const t = document.getElementById("progress_canvas"), e = t.getContext("2d"); e.font = '14px "Ubuntu Mono", monospace', e.fillStyle = "grey", e.textAlign = "center", e.textBaseline = "top"; const n = Math.floor(t.width / 7 - 3), o = "[" + "-".repeat(n + 1) + "]"; e.clearRect(0, 0, t.width, t.height), e.fillText(o, t.width / 2, 0) } function j(t) { document.getElementById("wa_log").innerHTML += t.replace(/\n/g, "<br>") } function U() { document.getElementsByName("comp_table_units_column_dummy").forEach((t => { let e = function (t) { let e = document.createElement("figure"), n = document.createElement("div"); n.className = "dummy_portrait", n.innerHTML = "ðŸ‘»"; let o = document.createElement("figcaption"); return o.textContent = t || "OPEN", e.appendChild(n), e.appendChild(o), e }(); t.appendChild(e) })) } function z() { document.getElementsByName("comp_table_units_column_dummy").forEach((t => { t.removeChild(t.lastChild) })) } function P(t) { const e = parseInt(t.value, 10); if (r.popcount(v) >= e) t.value = h; else { if (e > h) { let t = e - h; for (let e = 0; e < t; ++e)U() } else { if (!(e < h)) return; { let t = h - e; for (let e = 0; e < t; ++e)z() } } h = e, document.getElementById("comp_size_range_value").innerHTML = t.value.length > 1 ? e : "0" + e } } function G(t) { const e = parseInt(t.value, 10) + 1; document.getElementById("threads_range_value").innerHTML = e.length > 1 ? e : "0" + e } function W(t, e) { const n = "results_" + e; t.units.forEach((t => { I(n, t) })), t.traits.forEach((t => { const e = t.trait, o = B("preview", e), i = t.count + o, r = function (t) { return _.traits[t] }(e).value; r.length > 0 && r[Math.min(i - 1, r.length - 1)] > 0 && w(n, e, i) })), document.getElementById(n).classList.toggle("hidden") } function $() { if (d && _) { let t = [], e = [], n = []; for (let n = 0; n < _.units.length; ++n)S(n) ? t.push(n) : D(n) && e.push(n); for (let t = 0; t < _.traits.length; ++t) { const e = B("preview", t); e > 0 && n.push({ trait_index: t, count: e }) } return document.dispatchEvent(c), function (t, e, n, o, i) { return _.traits.forEach((e => { var n = t.exports.add_game_trait(e.scalar); e.value.forEach((e => { t.exports.push_trait_value(n, e) })) })), _.units.forEach((e => { var n = t.exports.add_game_unit(e.cost, e.hidden_value); e.traits.forEach((e => { t.exports.push_unit_trait(n, e) })) })), _.subsets.forEach((e => { var n = t.exports.add_subset_info(); e.forced_units.forEach((e => { t.exports.add_subset_forced_unit(n, e) })), e.removed_units.forEach((e => { t.exports.add_subset_removed_unit(n, e) })), e.bonus_traits_mods.forEach((e => { t.exports.set_subset_trait_bonus_mod(n, e.trait_index, e.value) })), t.exports.set_subset_comp_size_mod(n, e.comp_size_mod) })), t.exports.set_global_comp_size(e), n && n.forEach((e => { t.exports.add_global_forced_unit(e) })), o && o.forEach((e => { t.exports.add_global_removed_unit(e) })), i && i.forEach((e => { t.exports.set_global_trait_bonus(e.trait_index, e.count) })), t.exports.parse_subsets(), BigInt(t.exports.get_total_subset_combinations_count()) }(d, h, t, e, n) } } function R() { if (p & s.HTMLBuilt) return; if (!(p & s.GameConstantsLoaded)) return; if (t) { if (!(p & s.UIDataLoaded)) return; for (let t = 0; t < _.units.length; ++t)n(t, E(t)); for (let t = 0; t < _.traits.length; ++t)o(t) } const e = document.getElementById("comp_size_range"); e.addEventListener("input", (function () { P(this) })), P(e); const c = document.getElementById("threads_range"); c.max = window.navigator.hardwareConcurrency - 1, c.value = Math.max(0, window.navigator.hardwareConcurrency - 2), c.addEventListener("input", (function () { G(this) })), G(c); document.getElementById("runbtn").onclick = function (t) { document.getElementById("runbtn").disabled = !0; const e = $(); g = BigInt(document.getElementById("threads_range").value) + 1n; const n = 12100n * e / (75394027566n * g); j(`Evaluating ${e.toLocaleString()} comps. Estimated time: ~${n} secs...\n`), r.load_module_and_compile(l).then((t => { const e = new Uint8Array(d.exports.memory.buffer, d.exports.get_subsets(), d.exports.get_subsets_size()); let n = []; const o = new Worker(u); n.push(o), o.onmessage = function (e) { if (e.data) { console.log(e.data), console.log("Starting workers:", g); let o = e.data.results_count; for (let o = 0n; o < g - 1n; ++o) { let o = new Worker(u); n.push(o), o.postMessage({ type: "init_mem", data: { compiled_module: t, memory_buffer: e.data.memory_buffer } }) } let i = { results_count: o, min_value: 0, results: new Array(o) }, s = performance.now(), l = 0; for (let t = 0n; t < BigInt(n.length); ++t)n[t].onmessage = function (t) { if (++l, t.data.results.forEach((t => { y(i, t) })), l >= g) { j(`Complete! Execution time: ${.001 * (performance.now() - s)} sec.\n`), q(); let t = 0; i.results.forEach((e => { W(x(e.comp, e.value), t), ++t })), r.load_module_and_instantiate(a).then((t => { d = t, document.getElementById("runbtn").disabled = !1 })).catch((t => { console.error("Error loading parser module:", t) })), n.forEach((t => { t.terminate() })) } }, n[t].postMessage({ type: "run", data: { thread_idx: t, thread_count: g } }) } }, o.postMessage({ type: "init", data: { compiled_module: t, subsets_memory: e, subsets_count: d.exports.get_subsets_count() } }) })), function (t) { const e = document.getElementById("progress_canvas"), n = e.getContext("2d"); var o = document.getElementById("progress_container").offsetWidth; e.width = o, n.font = '14px "Ubuntu Mono", monospace', n.fillStyle = "grey", n.textAlign = "center", n.textBaseline = "top"; const i = ["|", "/", "-", "\\"]; let r = 0; const s = Math.floor(e.width / 7 - 3), a = 1e3 * Number(t) / s; let l = 0, u = "", c = " ".repeat(s); m = setInterval((function () { n.clearRect(0, 0, e.width, e.height); const t = "[" + u + i[r] + c + "]"; n.fillText(t, e.width / 2, 0), r = (r + 1) % i.length }), 100), f = setInterval((function () { l < s ? (u += "-", c = c.slice(0, -1), ++l) : clearInterval(f) }), a) }(n), function () { for (let t = 0; t < 10; ++t) { const e = "results_" + t; for (let t = 0; t < _.units.length; ++t)i.comp_table_util_get_unit(e, t).classList.add("hidden"); for (let t = 0; t < _.traits.length; ++t)w(e, t, 0); document.getElementById(e).classList.add("hidden") } }() }; for (let t = 0; t < _.units.length; ++t) { const e = i.unit_table_util_get_unit(t); e.figure_elm.addEventListener("click", (function () { H(t) })); e.options_elm.querySelector("#forced").addEventListener("click", (function () { T(t) })); e.options_elm.querySelector("#banned").addEventListener("click", (function () { A(t) })); i.comp_table_util_get_unit("preview", t).addEventListener("click", (function () { T(t) })) } for (let t = 0; t < _.traits.length; ++t) { const e = i.unit_table_util_get_emblem(t); if (!e) continue; e.addEventListener("click", (function () { k(t) })); i.comp_table_util_get_trait("preview", t).addEventListener("click", (function () { const e = B("preview", t); w("preview", t, e - 1) })) } for (let t = 1; t < 6; ++t) { document.getElementById("utt" + t).addEventListener("click", (function () { C(t) })) } p |= s.HTMLBuilt } function O() { if (R(), p & s.HTMLBuilt && p & s.ParserModuleLoaded) { document.getElementById("runbtn").disabled = !1 } } r.load_module_and_instantiate(a).then((t => { d = t, p |= s.ParserModuleLoaded, O() })).catch((t => { console.error("Error loading parser module:", t) })), r.load_json(game_constants_path).then((t => { _ = t, p |= s.GameConstantsLoaded, O() })).catch((t => { console.error("Error loading game constants data:", t) })), t && r.load_json(ui_data_path).then((t => { e(t), p |= s.UIDataLoaded, O() })).catch((t => { console.error("Error loading UI data:", t) }));